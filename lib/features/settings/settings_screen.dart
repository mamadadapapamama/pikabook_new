import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import '../../../core/theme/tokens/color_tokens.dart';
import '../../../core/theme/tokens/typography_tokens.dart';
import '../../../core/theme/tokens/spacing_tokens.dart';
import '../../core/utils/language_constants.dart';
import '../../core/widgets/loading_experience.dart';
import '../../../core/widgets/pika_button.dart';
import '../../core/widgets/pika_app_bar.dart';
import '../../core/widgets/usage_dialog.dart';
import '../../core/widgets/upgrade_modal.dart';
import '../../core/widgets/edit_dialog.dart';
import '../../core/utils/test_data_generator.dart';
import '../../core/services/common/banner_manager.dart';
import '../../core/services/subscription/unified_subscription_manager.dart';
import '../debug/payment_debug_screen.dart';

import 'settings_view_model.dart';
import 'package:flutter/foundation.dart';

class SettingsScreen extends StatefulWidget {
  final VoidCallback onLogout;

  const SettingsScreen({
    Key? key,
    required this.onLogout,
  }) : super(key: key);

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  late SettingsViewModel _viewModel;

  @override
  void initState() {
    super.initState();
    _viewModel = SettingsViewModel();
    _viewModel.addListener(_onViewModelChanged);
  }

  @override
  void dispose() {
    _viewModel.removeListener(_onViewModelChanged);
    _viewModel.dispose();
    super.dispose();
  }

  void _onViewModelChanged() {
    if (mounted) {
      setState(() {});
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: ColorTokens.background,
      appBar: PikaAppBar.settings(
        onBackPressed: () => Navigator.of(context).pop(),
      ),
      body: LoadingExperience(
        loadingMessage: 'ÏÑ§Ï†ï Î°úÎî© Ï§ë...',
        loadData: () async {
          await _viewModel.initialize();
        },
        contentBuilder: (context) => _buildProfileContent(),
      ),
    );
  }

  Widget _buildProfileContent() {
    final String displayName = _viewModel.currentUser?.displayName ?? 'ÏÇ¨Ïö©Ïûê';
    final String email = _viewModel.currentUser?.email ?? 'Ïù¥Î©îÏùº ÏóÜÏùå';
    final String? photoUrl = _viewModel.currentUser?.photoURL;

    return SingleChildScrollView(
      padding: const EdgeInsets.symmetric(horizontal: 24.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(height: 32),
          
          // 1. ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ ÏÑπÏÖò
          _buildSectionTitle('ÌîÑÎ°úÌïÑ'),
          const SizedBox(height: 12),
          _buildProfileCard(displayName, email, photoUrl),
          
          const SizedBox(height: 16),
          
          // Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 8),
            child: PikaButton(
              text: 'Î°úÍ∑∏ÏïÑÏõÉ',
              variant: PikaButtonVariant.outline,
              onPressed: () {
                widget.onLogout();
                Navigator.pop(context);
              },
              isFullWidth: true,
            ),
          ),
          
          const SizedBox(height: 32),
          
          // ÌòÑÏû¨ ÏÇ¨Ïö© Ï§ëÏù∏ ÌîåÎûú Ï†ïÎ≥¥ ÏÑπÏÖò
                      _buildSectionTitle('ÎÇ¥ ÌîåÎûú'),
            const SizedBox(height: 12),
            _buildPlanCard(isLoading: !_viewModel.isPlanLoaded),
          
          const SizedBox(height: 32),
          
          // 2. ÎÖ∏Ìä∏ ÏÑ§Ï†ï ÏÑπÏÖò
          _buildSectionTitle('ÎÖ∏Ìä∏ ÏÑ§Ï†ï'),
          const SizedBox(height: 12),
          
          // ÌïôÏäµÏûê Ïù¥Î¶Ñ ÏÑ§Ï†ï
          _buildSettingItem(
            title: 'ÌïôÏäµÏûê Ïù¥Î¶Ñ',
            value: _viewModel.userName,
            onTap: _showUserNameDialog,
          ),
          
          const SizedBox(height: 8),
          
          // ÎÖ∏Ìä∏ Ïä§ÌéòÏù¥Ïä§ Ïù¥Î¶Ñ ÏÑ§Ï†ï
          _buildSettingItem(
            title: 'ÎÖ∏Ìä∏Ïä§ÌéòÏù¥Ïä§ Ïù¥Î¶Ñ',
            value: _viewModel.noteSpaceName,
            onTap: _showNoteSpaceNameDialog,
          ),
          
          const SizedBox(height: 8),
          
          // ÏõêÎ¨∏ Ïñ∏Ïñ¥ ÏÑ§Ï†ï
          _buildSettingItem(
            title: 'ÏõêÎ¨∏ Ïñ∏Ïñ¥',
            value: SourceLanguage.getName(_viewModel.sourceLanguage),
            onTap: _showSourceLanguageDialog,
          ),
          
          const SizedBox(height: 8),
          
          // Î≤àÏó≠ Ïñ∏Ïñ¥ ÏÑ§Ï†ï
          _buildSettingItem(
            title: 'Î≤àÏó≠ Ïñ∏Ïñ¥',
            value: TargetLanguage.getName(_viewModel.targetLanguage),
            onTap: _showTargetLanguageDialog,
          ),
          
          const SizedBox(height: 8),
          
          // ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨ Î™®Îìú ÏÑ§Ï†ï
          _buildSettingItem(
            title: 'ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨ Î™®Îìú',
            value: _viewModel.useSegmentMode ? 'Î¨∏Ïû• Îã®ÏúÑ' : 'Î¨∏Îã® Îã®ÏúÑ',
            onTap: _showTextProcessingModeDialog,
          ),
          
          const SizedBox(height: 32),
          
          // ÎîîÎ≤ÑÍ∑∏ Ï†ÑÏö© ÏÑπÏÖò (ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±)
          if (kDebugMode) ...[
            _buildSectionTitle('üß™ Í∞úÎ∞úÏûê ÎèÑÍµ¨'),
            const SizedBox(height: 12),
            
            // ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï ÏÉùÏÑ± Î≤ÑÌäº
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 4),
              child: PikaButton(
                text: 'üéØ Î™®Îì† ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï ÏÉùÏÑ±',
                variant: PikaButtonVariant.primary,
                onPressed: _generateAllTestAccounts,
                isFullWidth: true,
              ),
            ),
            
            // ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï Î™©Î°ù Ï∂úÎ†• Î≤ÑÌäº
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 4),
              child: PikaButton(
                text: 'üìã ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï Î™©Î°ù Ï∂úÎ†•',
                variant: PikaButtonVariant.outline,
                onPressed: () => TestDataGenerator.printTestAccounts(),
                isFullWidth: true,
              ),
            ),
            
            // Î∞∞ÎÑà Îã´Í∏∞ Í∏∞Î°ù Ï¥àÍ∏∞Ìôî Î≤ÑÌäº
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 4),
              child: PikaButton(
                text: 'üîÑ Î∞∞ÎÑà Îã´Í∏∞ Í∏∞Î°ù Ï¥àÍ∏∞Ìôî',
                variant: PikaButtonVariant.outline,
                onPressed: _resetBannerStates,
                isFullWidth: true,
              ),
            ),
            
            // Payment Debug ÌôîÎ©¥ Ïù¥Îèô Î≤ÑÌäº
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 4),
              child: PikaButton(
                text: 'üîç Payment Debug ÌôîÎ©¥',
                variant: PikaButtonVariant.outline,
                onPressed: _navigateToPaymentDebug,
                isFullWidth: true,
              ),
            ),
            
            // Íµ¨ÎèÖ ÎîîÎ≤ÑÍ∑∏ Ìó¨Ìçº Î≤ÑÌäº
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 4),
              child: PikaButton(
                text: 'üîç Íµ¨ÎèÖ ÏÉÅÌÉú Ï†ÑÏ≤¥ ÏßÑÎã®',
                variant: PikaButtonVariant.text,
                onPressed: _runSubscriptionDebug,
                isFullWidth: true,
              ),
            ),
            
            const SizedBox(height: 32),
          ],
          
          // 3. Í≥ÑÏ†ï Í¥ÄÎ¶¨ ÏÑπÏÖò
          _buildSectionTitle('Í≥ÑÏ†ïÍ¥ÄÎ¶¨'),
          const SizedBox(height: 12),
          
          // ÌöåÏõê ÌÉàÌá¥ Î≤ÑÌäº
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 8),
            child: PikaButton(
              text: 'ÌöåÏõê ÌÉàÌá¥',
              variant: PikaButtonVariant.warning,
              onPressed: () => _handleAccountDeletion(context),
              isFullWidth: true,
            ),
          ),
          
          const SizedBox(height: 32),
        ],
      ),
    );
  }

  // ÌîÑÎ°úÌïÑ Ïπ¥Îìú ÏúÑÏ†Ø
  Widget _buildProfileCard(String displayName, String email, String? photoUrl) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(SpacingTokens.sm),
      decoration: BoxDecoration(
        color: ColorTokens.surface,
        borderRadius: BorderRadius.circular(SpacingTokens.radiusXs),
      ),
      child: Row(
        children: [
          // ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
          CircleAvatar(
            radius: SpacingTokens.iconSizeMedium,
            backgroundColor: ColorTokens.greyLight,
            backgroundImage: photoUrl != null ? NetworkImage(photoUrl) : null,
            child: photoUrl == null
                ? Icon(Icons.person, 
                    size: SpacingTokens.iconSizeMedium, 
                    color: ColorTokens.greyMedium)
                : null,
          ),
          SizedBox(width: SpacingTokens.md),
          
          // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  displayName,
                  style: TypographyTokens.buttonEn,
                ),
                SizedBox(height: SpacingTokens.xsHalf),
                Text(
                  email,
                  style: TypographyTokens.captionEn.copyWith(
                    color: ColorTokens.textPrimary.withOpacity(0.7),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  
  // ÏÑπÏÖò Ï†úÎ™© ÏúÑÏ†Ø
  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: TypographyTokens.button.copyWith(
        color: ColorTokens.textSecondary,
      ),
    );
  }
  
  // ÏÑ§Ï†ï Ìï≠Î™© ÏúÑÏ†Ø
  Widget _buildSettingItem({
    required String title,
    required String value,
    required VoidCallback onTap,
  }) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(SpacingTokens.radiusXs),
        child: Container(
          width: double.infinity,
          height: SpacingTokens.buttonHeight + SpacingTokens.sm,
          padding: EdgeInsets.symmetric(
            horizontal: SpacingTokens.md,
            vertical: SpacingTokens.sm
          ),
          decoration: BoxDecoration(
            color: ColorTokens.surface,
            borderRadius: BorderRadius.circular(SpacingTokens.radiusXs),
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    title,
                    style: TypographyTokens.captionEn.copyWith(
                      color: ColorTokens.textSecondary,
                    ),
                  ),
                  Text(
                    value,
                    style: TypographyTokens.body2,
                  ),
                ],
              ),
              SvgPicture.asset(
                'assets/images/icon_arrow_right.svg',
                width: SpacingTokens.iconSizeSmall + SpacingTokens.xs,
                height: SpacingTokens.iconSizeSmall + SpacingTokens.xs,
                colorFilter: const ColorFilter.mode(
                  ColorTokens.secondary,
                  BlendMode.srcIn,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  // ÌîåÎûú Ïπ¥Îìú ÏúÑÏ†Ø (Î°úÎî©/Ï†ïÎ≥¥ ÌÜµÌï©)
  Widget _buildPlanCard({bool isLoading = false}) {
    return GestureDetector(
      onTap: isLoading ? null : () async {
        // ÌîåÎûú Ï†ïÎ≥¥ ÏÉàÎ°úÍ≥†Ïπ®
        await _viewModel.refreshPlanInfo();
      },
      child: Container(
        width: double.infinity,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(4),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // ÌîåÎûú Ïù¥Î¶Ñ ÎòêÎäî Î°úÎî© Ïä§ÏºàÎ†àÌÜ§
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      if (isLoading)
                        Container(
                          width: 80,
                          height: 20,
                          decoration: BoxDecoration(
                            color: ColorTokens.greyLight,
                            borderRadius: BorderRadius.circular(4),
                          ),
                        )
                      else ...[
                        Text(
                          _viewModel.planName,
                          style: TypographyTokens.body2.copyWith(
                            color: ColorTokens.textPrimary,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          'ÌÉ≠ÌïòÏó¨ ÏÉàÎ°úÍ≥†Ïπ®',
                          style: TypographyTokens.caption.copyWith(
                            color: ColorTokens.textSecondary,
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
                
                // ÏÇ¨Ïö©Îüâ ÌôïÏù∏ Î≤ÑÌäº
                Opacity(
                  opacity: isLoading ? 0.5 : 1.0,
                  child: GestureDetector(
                    onTap: isLoading ? null : _showUsageDialog,
                    child: Row(
                      children: [
                        Text(
                          'ÏÇ¨Ïö©Îüâ ÌôïÏù∏',
                          style: TypographyTokens.body2.copyWith(
                            color: ColorTokens.textPrimary,
                            fontWeight: FontWeight.normal,
                          ),
                        ),
                        SizedBox(width: SpacingTokens.md),
                        SvgPicture.asset(
                          'assets/images/icon_arrow_right.svg',
                          width: 20,
                          height: 20,
                          colorFilter: const ColorFilter.mode(
                            ColorTokens.secondary,
                            BlendMode.srcIn,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
            
            // üéØ Íµ¨ÎèÖ ÏÉÅÌÉúÎ≥Ñ CTA Î≤ÑÌäº ÌëúÏãú (Î°úÎî© Ï§ëÏù¥ ÏïÑÎãê ÎïåÎßå)
            if (!isLoading && _viewModel.ctaButtonText.isNotEmpty) ...[
              SizedBox(height: SpacingTokens.md),
              PikaButton(
                text: _viewModel.ctaButtonText,
                variant: _viewModel.ctaButtonEnabled 
                    ? PikaButtonVariant.primary 
                    : PikaButtonVariant.outline,
                size: PikaButtonSize.small,
                onPressed: _viewModel.ctaButtonEnabled ? _handleCTAButtonPressed : null,
                isFullWidth: true,
              ),
              
              // üéØ ÏÑúÎ∏åÌÖçÏä§Ìä∏ ÌëúÏãú (ÏûàÎäî Í≤ΩÏö∞Îßå)
              if (_viewModel.ctaSubtext.isNotEmpty) ...[
                SizedBox(height: SpacingTokens.xs),
                Text(
                  _viewModel.ctaSubtext,
                  style: TypographyTokens.caption.copyWith(
                    color: ColorTokens.textSecondary,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ],
          ],
        ),
      ),
    );
  }
  
  /// üéØ CTA Î≤ÑÌäº ÌÅ¥Î¶≠ Ï≤òÎ¶¨
  void _handleCTAButtonPressed() {
    if (_viewModel.ctaButtonText.contains('Î¨∏Ïùò')) {
      // "ÏÇ¨Ïö©Îüâ Ï∂îÍ∞Ä Î¨∏Ïùò" Î≤ÑÌäºÏù∏ Í≤ΩÏö∞
      _contactSupport();
    } else if (_viewModel.ctaButtonText.contains('ÏóÖÍ∑∏Î†àÏù¥Îìú')) {
      // "ÌîÑÎ¶¨ÎØ∏ÏóÑÏúºÎ°ú ÏóÖÍ∑∏Î†àÏù¥Îìú" Î≤ÑÌäºÏù∏ Í≤ΩÏö∞
      _showUpgradeModal();
    }
    // disabled Î≤ÑÌäºÎì§ÏùÄ onPressedÍ∞Ä nullÏù¥ÎØÄÎ°ú Ïó¨Í∏∞Ïóê ÎèÑÎã¨ÌïòÏßÄ ÏïäÏùå
  }
  
  // ÏÇ¨Ïö©Îüâ Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
  Future<void> _showUsageDialog() async {
    if (kDebugMode) {
      print('üìä ÏÇ¨Ïö©Îüâ ÌôïÏù∏ Î≤ÑÌäº ÌÅ¥Î¶≠ - ÏÇ¨Ïö©Îüâ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë');
      print('üìä ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏøºÌÑ∞ ÏÇ¨Ïö©: ${_viewModel.shouldUsePremiumQuota}');
      print('üìä ÌîåÎûú Ï†úÌïú: ${_viewModel.planLimits}');
    }
    
    if (context.mounted) {
      await UsageDialog.show(
        context,
        limitStatus: null,
        usagePercentages: null,
        onContactSupport: _contactSupport,
        shouldUsePremiumQuota: _viewModel.shouldUsePremiumQuota,
        planLimits: _viewModel.planLimits,
      );
    }
  }
  
  // Î¨∏ÏùòÌïòÍ∏∞ Í∏∞Îä• (Ìñ•ÌõÑ Ïù∏Ïï± Íµ¨Îß§Î°ú Ï†ÑÌôò ÏòàÏ†ï)
  void _contactSupport() async {
    final success = await _viewModel.contactSupport();
    if (mounted) {
      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Î¨∏ÏùòÍ∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.'),
            backgroundColor: ColorTokens.success,
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Î¨∏Ïùò Îì±Î°ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'),
            backgroundColor: ColorTokens.error,
          ),
        );
      }
    }
  }
  
  // ÌïôÏäµÏûê Ïù¥Î¶Ñ ÏÑ§Ï†ï Îã§Ïù¥ÏñºÎ°úÍ∑∏
  Future<void> _showUserNameDialog() async {
    showDialog<void>(
      context: context,
      builder: (context) => EditDialog.forUserName(
        currentName: _viewModel.userName,
        onNameUpdated: (newName) async {
          if (newName.isNotEmpty) {
            await _viewModel.updateUserName(newName);
          }
        },
      ),
    );
  }
  
  // ÎÖ∏Ìä∏ Ïä§ÌéòÏù¥Ïä§ Ïù¥Î¶Ñ Î≥ÄÍ≤Ω Îã§Ïù¥ÏñºÎ°úÍ∑∏
  Future<void> _showNoteSpaceNameDialog() async {
    showDialog<void>(
      context: context,
      builder: (context) => EditDialog.forNoteSpace(
        currentName: _viewModel.noteSpaceName,
        onNameUpdated: (newName) async {
          if (newName.isNotEmpty) {
            final success = await _viewModel.updateNoteSpaceName(newName);
            if (mounted) {
              if (success) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                      'ÎÖ∏Ìä∏ Ïä§ÌéòÏù¥Ïä§ Ïù¥Î¶ÑÏù¥ Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.',
                      style: TypographyTokens.caption.copyWith(
                        color: ColorTokens.textLight,
                      ),
                    ),
                  ),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                      'ÎÖ∏Ìä∏ Ïä§ÌéòÏù¥Ïä§ Ïù¥Î¶Ñ Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
                      style: TypographyTokens.caption.copyWith(
                        color: ColorTokens.textLight,
                      ),
                    ),
                    backgroundColor: ColorTokens.error,
                  ),
                );
              }
            }
          }
        },
      ),
    );
  }
  
  // ÏõêÎ¨∏ Ïñ∏Ïñ¥ ÏÑ§Ï†ï Îã§Ïù¥ÏñºÎ°úÍ∑∏
  Future<void> _showSourceLanguageDialog() async {
    final sourceLanguages = [...SourceLanguage.SUPPORTED, ...SourceLanguage.FUTURE_SUPPORTED];
    
    final result = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: ColorTokens.surface,
        title: Text('ÏõêÎ¨∏ Ïñ∏Ïñ¥ ÏÑ§Ï†ï', style: TypographyTokens.subtitle2),
        content: SizedBox(
          width: double.maxFinite,
          height: 300,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: sourceLanguages.length,
            itemBuilder: (context, index) {
              final language = sourceLanguages[index];
              final bool isFutureSupported = SourceLanguage.FUTURE_SUPPORTED.contains(language);
              
              return RadioListTile<String>(
                title: Text(
                  SourceLanguage.getName(language),
                  style: TypographyTokens.body2,
                ),
                subtitle: isFutureSupported 
                    ? Text(
                        'Ìñ•ÌõÑ ÏßÄÏõê ÏòàÏ†ï',
                        style: TypographyTokens.caption.copyWith(
                          color: ColorTokens.textPrimary,
                        ),
                      )
                    : null,
                value: language,
                groupValue: _viewModel.sourceLanguage,
                activeColor: ColorTokens.primary,
                onChanged: isFutureSupported 
                    ? null 
                    : (value) {
                        Navigator.pop(context, value);
                      },
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Ï∑®ÏÜå',
              style: TypographyTokens.button.copyWith(
                color: ColorTokens.textPrimary,
              ),
            ),
          ),
        ],
      ),
    );
    
    if (result != null) {
      await _viewModel.updateSourceLanguage(result);
    }
  }
  
  // Î≤àÏó≠ Ïñ∏Ïñ¥ ÏÑ§Ï†ï Îã§Ïù¥ÏñºÎ°úÍ∑∏
  Future<void> _showTargetLanguageDialog() async {
    final targetLanguages = [...TargetLanguage.SUPPORTED, ...TargetLanguage.FUTURE_SUPPORTED];
    
    final result = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: ColorTokens.surface,
        title: Text('Î≤àÏó≠ Ïñ∏Ïñ¥ ÏÑ§Ï†ï', style: TypographyTokens.subtitle2),
        content: SizedBox(
          width: double.maxFinite,
          height: 300,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: targetLanguages.length,
            itemBuilder: (context, index) {
              final language = targetLanguages[index];
              final bool isFutureSupported = TargetLanguage.FUTURE_SUPPORTED.contains(language);
              
              return RadioListTile<String>(
                title: Text(
                  TargetLanguage.getName(language),
                  style: TypographyTokens.body2,
                ),
                subtitle: isFutureSupported 
                    ? Text(
                        'Ìñ•ÌõÑ ÏßÄÏõê ÏòàÏ†ï',
                        style: TypographyTokens.caption.copyWith(
                          color: ColorTokens.textPrimary,
                        ),
                      )
                    : null,
                value: language,
                groupValue: _viewModel.targetLanguage,
                activeColor: ColorTokens.primary,
                onChanged: isFutureSupported 
                    ? null 
                    : (value) {
                        Navigator.pop(context, value);
                      },
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Ï∑®ÏÜå',
              style: TypographyTokens.button.copyWith(
                color: ColorTokens.textPrimary,
              ),
            ),
          ),
        ],
      ),
    );
    
    if (result != null) {
      await _viewModel.updateTargetLanguage(result);
    }
  }
  
  // ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨ Î™®Îìú ÏÑ§Ï†ï Îã§Ïù¥ÏñºÎ°úÍ∑∏
  Future<void> _showTextProcessingModeDialog() async {
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: ColorTokens.surface,
        title: Text('ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨ Î™®Îìú ÏÑ§Ï†ï', style: TypographyTokens.subtitle2),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            RadioListTile<bool>(
              title: Text(
                'Î¨∏Ïû• Îã®ÏúÑ',
                style: TypographyTokens.body2,
              ),
              subtitle: Text(
                'Î¨∏Ïû•Î≥ÑÎ°ú Î∂ÑÎ¶¨ÌïòÏó¨ Î≤àÏó≠ÌïòÍ≥† Î∞úÏùåÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.',
                style: TypographyTokens.caption.copyWith(
                  color: ColorTokens.textSecondary,
                ),
              ),
              value: true,
              groupValue: _viewModel.useSegmentMode,
              activeColor: ColorTokens.primary,
              onChanged: (value) => Navigator.pop(context, value),
            ),
            RadioListTile<bool>(
              title: Text(
                'Î¨∏Îã® Îã®ÏúÑ',
                style: TypographyTokens.body2,
              ),
              subtitle: Text(
                'Î¨∏Îã® Îã®ÏúÑÎ°ú Î≤àÏó≠Ìï¥ Î¨∏Îß•Ïóê ÎßûÎäî Î≤àÏó≠ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.',
                style: TypographyTokens.caption.copyWith(
                  color: ColorTokens.textSecondary,
                ),
              ),
              value: false,
              groupValue: _viewModel.useSegmentMode,
              activeColor: ColorTokens.primary,
              onChanged: (value) => Navigator.pop(context, value),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Ï∑®ÏÜå',
              style: TypographyTokens.button.copyWith(
                color: ColorTokens.textSecondary,
              ),
            ),
          ),
        ],
      ),
    );
    
    if (result != null) {
      final success = await _viewModel.updateTextProcessingMode(result);
      if (mounted && success) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨ Î™®ÎìúÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§. ÏÉàÎ°ú ÎßåÎìúÎäî ÎÖ∏Ìä∏Ïóê Ï†ÅÏö©Îê©ÎãàÎã§.',
              style: TypographyTokens.caption.copyWith(
                color: ColorTokens.textLight,
              ),
            ),
          ),
        );
      }
    }
  }
  
  // Í≥ÑÏ†ï ÌÉàÌá¥ Í∏∞Îä• Íµ¨ÌòÑ
  /// ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï ÏÉùÏÑ± Ìï∏Îì§Îü¨ (ÎîîÎ≤ÑÍ∑∏ Ï†ÑÏö©)
  Future<void> _generateAllTestAccounts() async {
    if (!kDebugMode) return;
    
    try {
      // Î°úÎî© ÌëúÏãú
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(
          child: CircularProgressIndicator(),
        ),
      );
      
      await TestDataGenerator.generateAllTestAccounts();
      
      // Î°úÎî© Îã´Í∏∞
      if (mounted) Navigator.of(context).pop();
      
      // ÏÑ±Í≥µ Î©îÏãúÏßÄ
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('üéâ Î™®Îì† ÌÖåÏä§Ìä∏ Í≥ÑÏ†ïÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!'),
            backgroundColor: Colors.green,
          ),
        );
      }
      
    } catch (e) {
      // Î°úÎî© Îã´Í∏∞
      if (mounted) Navigator.of(context).pop();
      
      // ÏóêÎü¨ Î©îÏãúÏßÄ
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï ÏÉùÏÑ± Ïã§Ìå®: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Future<void> _handleAccountDeletion(BuildContext context) async {
    // 1. Ïû¨Ïù∏Ï¶ù ÌïÑÏöî Ïó¨Î∂Ä ÌôïÏù∏
    final needsReauth = await _viewModel.isReauthenticationRequired();
    
    if (needsReauth) {
      // Ïû¨Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞: Ïû¨Ïù∏Ï¶ù ÏïàÎÇ¥ Î™®Îã¨
      await _showReauthRequiredDialog(context);
    } else {
      // Ïû¨Ïù∏Ï¶ùÏù¥ Î∂àÌïÑÏöîÌïú Í≤ΩÏö∞: Í≤ΩÍ≥† Î©îÏãúÏßÄ ÌõÑ Î∞îÎ°ú ÌÉàÌá¥ Ï≤òÎ¶¨
      await _showWarningAndDelete(context);
    }
  }
  
  // Ïû¨Ïù∏Ï¶ù ÌïÑÏöî ÏïàÎÇ¥ Î™®Îã¨
  Future<void> _showReauthRequiredDialog(BuildContext context) async {
    final result = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: ColorTokens.surface,
        title: Text(
          'ÌöåÏõê ÌÉàÌá¥',
          style: TypographyTokens.subtitle2.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: ColorTokens.warning.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(
                  color: ColorTokens.warning.withOpacity(0.3),
                  width: 1,
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(
                        Icons.security,
                        size: 16,
                        color: ColorTokens.warning,
                      ),
                      const SizedBox(width: 8),
                      Text(
                        'Î≥¥Ïïà Ïù∏Ï¶ù ÌïÑÏöî',
                        style: TypographyTokens.caption.copyWith(
                          color: ColorTokens.warning,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 6),
                  Text(
                    'ÌÉàÌá¥ÌïòÏãúÎ†§Î©¥ Î≥¥ÏïàÏùÑ ÏúÑÌï¥ Ïû¨Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.\nÎ°úÍ∑∏ÏïÑÏõÉ ÌõÑ Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                    style: TypographyTokens.caption.copyWith(
                      color: ColorTokens.textSecondary,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, 'cancel'),
            child: Text(
              'Ï∑®ÏÜå',
              style: TypographyTokens.button.copyWith(
                color: ColorTokens.textSecondary,
              ),
            ),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, 'logout'),
            child: Text(
              'Î°úÍ∑∏ÏïÑÏõÉ',
              style: TypographyTokens.button.copyWith(
                color: ColorTokens.primary,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
    
    if (result == 'logout') {
      // Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
      widget.onLogout();
      Navigator.pop(context);
    }
  }
  
  // Í≤ΩÍ≥† Î©îÏãúÏßÄ ÌõÑ ÌÉàÌá¥ Ï≤òÎ¶¨ (Ïû¨Ïù∏Ï¶ù Î∂àÌïÑÏöîÌïú Í≤ΩÏö∞)
  Future<void> _showWarningAndDelete(BuildContext context) async {
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: ColorTokens.surface,
        title: Text(
          'ÌöåÏõê ÌÉàÌá¥',
          style: TypographyTokens.subtitle2.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Ï†ïÎßêÎ°ú ÌöåÏõê ÌÉàÌá¥ÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
              style: TypographyTokens.body2,
            ),
            const SizedBox(height: 12),
            Text(
              '‚Ä¢ ÌöåÏõê ÌÉàÌá¥ Ïãú Î™®Îì† ÎÖ∏Ìä∏ÏôÄ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎê©ÎãàÎã§.',
              style: TypographyTokens.body2.copyWith(
                color: ColorTokens.textPrimary,
              ),
            ),
            Text(
              '‚Ä¢ Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.',
              style: TypographyTokens.body2.copyWith(
                color: ColorTokens.textPrimary,
              ),
            ),
            Text(
              '‚Ä¢ ÌÉàÌá¥ ÌõÑ ÌôòÎ∂à Î∞è Í≤∞Ï†ú Î¨∏Ïùò ÎåÄÏùëÏùÑ ÏúÑÌï¥, Íµ¨ÎèÖ Ï†ïÎ≥¥Îäî 90ÏùºÍ∞Ñ Î≥¥Ï°¥ ÌõÑ ÏûêÎèô ÏÇ≠Ï†úÎê©ÎãàÎã§.',
              style: TypographyTokens.body2.copyWith(
                color: ColorTokens.textPrimary,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text(
              'Ï∑®ÏÜå',
              style: TypographyTokens.button.copyWith(
                color: ColorTokens.textSecondary,
              ),
            ),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: Text(
              'ÌÉàÌá¥ÌïòÍ∏∞',
              style: TypographyTokens.button.copyWith(
                color: ColorTokens.error,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
    
    if (confirm != true) return;
    
    // ÌÉàÌá¥ Ï≤òÎ¶¨ Ïã§Ìñâ
    await _executeAccountDeletion(context);
  }
  
  // Ïã§Ï†ú ÌÉàÌá¥ Ï≤òÎ¶¨ Ïã§Ìñâ
  Future<void> _executeAccountDeletion(BuildContext context) async {
    try {
      // Î®ºÏ†Ä Ïä§ÎÇµÎ∞î ÌëúÏãú (Firebase Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï†ÑÏóê)
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÍ≥† ÏûàÏäµÎãàÎã§...',
              style: TypographyTokens.caption.copyWith(
                color: Colors.white,
              ),
            ),
            backgroundColor: ColorTokens.snackbarBg,
            behavior: SnackBarBehavior.fixed,
            duration: Duration(seconds: 2),
          ),
        );
      }
      
      // Ïä§ÎÇµÎ∞îÍ∞Ä ÌëúÏãúÎê† ÏãúÍ∞Ñ ÌôïÎ≥¥
      await Future.delayed(Duration(milliseconds: 500));
      
      final success = await _viewModel.deleteAccount();
      
      if (mounted && success) {
        // ÌÉàÌá¥ ÏÑ±Í≥µ Î©îÏãúÏßÄ
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Í≥ÑÏ†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.',
              style: TypographyTokens.caption.copyWith(
                color: Colors.white,
              ),
            ),
            backgroundColor: ColorTokens.success,
            behavior: SnackBarBehavior.fixed,
            duration: Duration(seconds: 2),
          ),
        );
        
        // Î™ÖÏãúÏ†ÅÏúºÎ°ú Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨ (Firebase ÏÉÅÌÉú Î≥ÄÍ≤ΩÎßåÏúºÎ°úÎäî Î∂àÏ∂©Î∂Ñ)
        await Future.delayed(Duration(milliseconds: 500));
        if (mounted) {
          widget.onLogout(); // Î°úÍ∑∏ÏïÑÏõÉ ÏΩúÎ∞± Ìò∏Ï∂ú
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              e.toString(),
              style: TypographyTokens.caption.copyWith(
                color: Colors.white,
              ),
            ),
            backgroundColor: ColorTokens.error,
            behavior: SnackBarBehavior.fixed,
            duration: Duration(seconds: 4),
          ),
        );
      }
    }
  }

  // üîÑ Î∞∞ÎÑà Îã´Í∏∞ Í∏∞Î°ù Ï¥àÍ∏∞Ìôî (ÌÖåÏä§Ìä∏Ïö©)
  Future<void> _resetBannerStates() async {
    try {
      final bannerManager = BannerManager();
      await bannerManager.resetAllBannerStates();
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '‚úÖ Î™®Îì† Î∞∞ÎÑà Îã´Í∏∞ Í∏∞Î°ùÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.',
              style: TypographyTokens.caption.copyWith(
                color: Colors.white,
              ),
            ),
            backgroundColor: ColorTokens.success,
            behavior: SnackBarBehavior.fixed,
            duration: Duration(seconds: 2),
          ),
        );
      }
      
      if (kDebugMode) {
        debugPrint('‚úÖ [Settings] Î™®Îì† Î∞∞ÎÑà Îã´Í∏∞ Í∏∞Î°ù Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '‚ùå Î∞∞ÎÑà Ï¥àÍ∏∞Ìôî Ïã§Ìå®: $e',
              style: TypographyTokens.caption.copyWith(
                color: Colors.white,
              ),
            ),
            backgroundColor: ColorTokens.error,
            behavior: SnackBarBehavior.fixed,
            duration: Duration(seconds: 3),
          ),
        );
      }
      
      if (kDebugMode) {
        debugPrint('‚ùå [Settings] Î∞∞ÎÑà Ï¥àÍ∏∞Ìôî Ïã§Ìå®: $e');
      }
    }
  }

  // üîç Íµ¨ÎèÖ ÏÉÅÌÉú Í∞ÑÎã® ÏßÑÎã® (v4-simplified)
  Future<void> _runSubscriptionDebug() async {
    if (!kDebugMode) return;
    
    try {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'üîç Íµ¨ÎèÖ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë... (ÏΩòÏÜî ÌôïÏù∏)',
              style: TypographyTokens.caption.copyWith(
                color: Colors.white,
              ),
            ),
            backgroundColor: ColorTokens.primary,
            behavior: SnackBarBehavior.fixed,
            duration: Duration(seconds: 2),
          ),
        );
      }
      
      // v4-simplified: Í∞ÑÎã®Ìïú ÏÉÅÌÉú Ï∂úÎ†•
      final unifiedManager = UnifiedSubscriptionManager();
      final entitlements = await unifiedManager.getSubscriptionEntitlements(forceRefresh: true);
      
      debugPrint('üîç [Settings] === v4-simplified Íµ¨ÎèÖ ÏÉÅÌÉú ===');
      debugPrint('   Í∂åÌïú: ${entitlements['entitlement']}');
      debugPrint('   Íµ¨ÎèÖ ÏÉÅÌÉú: ${entitlements['subscriptionStatus']}');
      debugPrint('   Ï≤¥Ìóò ÏÇ¨Ïö© Ïù¥Î†•: ${entitlements['hasUsedTrial']}');
      debugPrint('   ÌîÑÎ¶¨ÎØ∏ÏóÑ Ïó¨Î∂Ä: ${entitlements['isPremium']}');
      debugPrint('   Ï≤¥Ìóò Ïó¨Î∂Ä: ${entitlements['isTrial']}');
      debugPrint('   ÏÉÅÌÉú Î©îÏãúÏßÄ: ${entitlements['statusMessage']}');
      debugPrint('   ÎßåÎ£å Ïó¨Î∂Ä: ${entitlements['isExpired']}');
      debugPrint('   ÌôúÏÑ± Ïó¨Î∂Ä: ${entitlements['isActive']}');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '‚úÖ Íµ¨ÎèÖ ÏÉÅÌÉú ÌôïÏù∏ ÏôÑÎ£å. ÏΩòÏÜîÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.',
              style: TypographyTokens.caption.copyWith(
                color: Colors.white,
              ),
            ),
            backgroundColor: ColorTokens.success,
            behavior: SnackBarBehavior.fixed,
            duration: Duration(seconds: 3),
          ),
        );
      }
      
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '‚ùå Íµ¨ÎèÖ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: $e',
              style: TypographyTokens.caption.copyWith(
                color: Colors.white,
              ),
            ),
            backgroundColor: ColorTokens.error,
            behavior: SnackBarBehavior.fixed,
            duration: Duration(seconds: 3),
          ),
        );
      }
      
      if (kDebugMode) {
        debugPrint('‚ùå [Settings] Íµ¨ÎèÖ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: $e');
      }
    }
  }

  void _showUpgradeModal() async {
    // üö® Ïù¥ÎØ∏ ÏóÖÍ∑∏Î†àÏù¥Îìú Î™®Îã¨Ïù¥ ÌëúÏãú Ï§ëÏù¥Î©¥ Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ
    if (UpgradeModal.isShowing) {
      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è [Settings] ÏóÖÍ∑∏Î†àÏù¥Îìú Î™®Îã¨Ïù¥ Ïù¥ÎØ∏ ÌëúÏãú Ï§ëÏûÖÎãàÎã§. Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ');
      }
      return;
    }

    try {
      // üéØ Ï≤¥Ìóò Ïù¥Î†•Ïóê Îî∞Î•∏ Î∂ÑÍ∏∞ Ï≤òÎ¶¨
      final hasUsedFreeTrial = _viewModel.hasUsedFreeTrial;
      final hasEverUsedTrial = _viewModel.hasEverUsedTrial;
      if (hasUsedFreeTrial || hasEverUsedTrial) {
        // üéØ Ï≤¥Ìóò Ïù¥Î†• ÏûàÏùå -> ÏùºÎ∞ò ÌîÑÎ¶¨ÎØ∏ÏóÑ Î™®Îã¨
        UpgradeModal.show(
          context,
          reason: UpgradeReason.general,
          onUpgrade: () {
            debugPrint('üéØ [Settings] ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏóÖÍ∑∏Î†àÏù¥Îìú ÏÑ†ÌÉù (Ï≤¥Ìóò Ïù¥Î†• ÏûàÏùå)');
          },
        );
      } else {
        // üéØ Ï≤¥Ìóò Ïù¥Î†• ÏóÜÏùå -> Î¨¥Î£åÏ≤¥Ìóò Ïú†ÎèÑ Î™®Îã¨
        UpgradeModal.show(
          context,
          reason: UpgradeReason.welcomeTrial,
          onUpgrade: () {
            debugPrint('üéØ [Settings] Î¨¥Î£åÏ≤¥Ìóò ÏãúÏûë ÏÑ†ÌÉù');
          },
        );
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå [Settings] ÏóÖÍ∑∏Î†àÏù¥Îìú Î™®Îã¨ ÌëúÏãú Ïã§Ìå®: $e');
      }
      // Ïò§Î•ò Ïãú Í∏∞Î≥∏ Î™®Îã¨ ÌëúÏãú
      UpgradeModal.show(
        context,
        reason: UpgradeReason.settings,
        onUpgrade: () {
          debugPrint('üéØ [Settings] ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏóÖÍ∑∏Î†àÏù¥Îìú ÏÑ†ÌÉù (Í∏∞Î≥∏)');
        },
      );
    }
  }

  /// üîç Payment Debug ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
  void _navigateToPaymentDebug() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const PaymentDebugScreen(),
      ),
    );
  }
}
