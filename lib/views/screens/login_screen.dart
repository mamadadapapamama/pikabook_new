import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart';
import '../../../core/theme/tokens/color_tokens.dart';
import '../../../core/theme/tokens/typography_tokens.dart';
import '../../../core/theme/tokens/spacing_tokens.dart';
import '../../../core/widgets/dot_loading_indicator.dart';
import '../../../firebase_options.dart';
import 'package:google_sign_in/google_sign_in.dart';
import '../../core/services/authentication/auth_service.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

import 'package:url_launcher/url_launcher.dart';
import 'package:flutter/gestures.dart';

class LoginScreen extends StatefulWidget {
  final Function(User) onLoginSuccess;
  final VoidCallback? onSkipLogin;
  final bool isInitializing;

  const LoginScreen({
    Key? key,
    required this.onLoginSuccess,
    this.onSkipLogin,
    this.isInitializing = false,
  }) : super(key: key);

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  bool _isLoading = false;
  String? _errorMessage;
  
  // Ïù∏Ï¶ù ÏÑúÎπÑÏä§
  final AuthService _authService = AuthService();
  
  // Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏ Ìèº Í¥ÄÎ†®
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isEmailLogin = false;
  bool _isSignUp = false;

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ
          Positioned.fill(
            child: Image.asset(
              'assets/images/splash_background.png',
              fit: BoxFit.cover,
            ),
          ),
          // Í∑∏ÎùºÎç∞Ïù¥ÏÖò Ïò§Î≤ÑÎ†àÏù¥
          Positioned.fill(
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    ColorTokens.black.withOpacity(0.0),
                    ColorTokens.black.withOpacity(0.3),
                    ColorTokens.black.withOpacity(0.0),
                  ],
                  stops: const [0.0, 0.5, 1.0],
                ),
              ),
            ),
          ),
          SafeArea(
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: SpacingTokens.xxl - SpacingTokens.sm),
              child: Center(
                    child: SingleChildScrollView(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          // ÏÉÅÎã® Ïó¨Î∞±
                          SizedBox(
                            height: _getSafeScreenHeight(context) * 0.15, // ÏÉÅÎã® Ïó¨Î∞± Ï°∞Ï†ï
                          ),
                          
                          // ÏÉà Î°úÍ≥† (bird) - Îß® ÏúÑÏóê Î∞∞Ïπò
                          Image.asset(
                              'assets/images/pikabook_bird.png',
                              width: SpacingTokens.iconSizeXLarge + SpacingTokens.xs,
                              height: SpacingTokens.iconSizeXLarge + SpacingTokens.xs,
                              fit: BoxFit.contain,
                          ),
                          SizedBox(height: SpacingTokens.md),
                          
                          // ÏõêÏÑú Í≥µÎ∂Ä, Ïä§ÎßàÌä∏ÌïòÍ≤å ÌÖçÏä§Ìä∏ - Ï§ëÍ∞ÑÏóê Î∞∞Ïπò
                          Text(
                              'Ï±ÖÏúºÎ°ú ÌïòÎäî Ï§ëÍµ≠Ïñ¥ Í≥µÎ∂Ä,\nÏä§ÎßàÌä∏ÌïòÍ≤å',
                              textAlign: TextAlign.center,
                              style: TypographyTokens.subtitle1.copyWith(
                                color: ColorTokens.textLight,
                                height: 1.4,
                            ),
                          ),
                          const SizedBox(height: 12),
                          
                          // ÌÖçÏä§Ìä∏ Î°úÍ≥† - Îß® ÏïÑÎûòÏóê Î∞∞Ïπò
                          Image.asset(
                              'assets/images/pikabook_textlogo.png',
                              width: SpacingTokens.appLogoWidth2x,
                              height: SpacingTokens.appLogoHeight2x,
                              fit: BoxFit.contain,
                              color: ColorTokens.textLight,
                          ),
                          SizedBox(height: SpacingTokens.xl),

                          // Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ ÎòêÎäî Ïò§Î•ò Î©îÏãúÏßÄ
                          if (_isLoading)
                            const DotLoadingIndicator(
                              dotColor: ColorTokens.textLight,
                            )
                          else if (_errorMessage != null)
                            Container(
                              padding: EdgeInsets.all(SpacingTokens.sm + SpacingTokens.xs),
                              margin: EdgeInsets.symmetric(vertical: SpacingTokens.sm),
                              decoration: BoxDecoration(
                                color: ColorTokens.errorLight,
                                borderRadius: BorderRadius.circular(SpacingTokens.radiusSmall),
                                border: Border.all(
                                  color: ColorTokens.error.withOpacity(0.3),
                                  width: 1,
                                ),
                              ),
                              child: Text(
                                _errorMessage!,
                                textAlign: TextAlign.center,
                                style: TypographyTokens.body2.copyWith(
                                  color: ColorTokens.error,
                                ),
                              ),
                            ),

                          SizedBox(height: SpacingTokens.md),

                          // üéØ ÌÜµÌï© Î°úÍ∑∏Ïù∏ Î≤ÑÌäºÎì§ (ÍπîÎÅîÌïú 3Î≤ÑÌäº Íµ¨Ï°∞)
                          Column(
                              children: [
                                if (_isEmailLogin) ...[
                                  // Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏ Ìèº
                                  Container(
                                    width: 250,
                                    child: Column(
                                      children: [
                                        // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
                                        Row(
                                          children: [
                                            TextButton.icon(
                                              onPressed: () {
                                                setState(() {
                                                  _isEmailLogin = false;
                                                  _errorMessage = null;
                                                  _emailController.clear();
                                                  _passwordController.clear();
                                                });
                                              },
                                              icon: Icon(Icons.arrow_back, color: ColorTokens.textLight, size: 18),
                                              label: Text(
                                                'Îí§Î°ú',
                                                style: TypographyTokens.body2.copyWith(color: ColorTokens.textLight),
                                              ),
                                            ),
                                          ],
                                        ),
                                        SizedBox(height: SpacingTokens.sm),
                                        
                                        // Ïù¥Î©îÏùº ÏûÖÎ†• ÌïÑÎìú
                                        TextField(
                                          controller: _emailController,
                                          keyboardType: TextInputType.emailAddress,
                                          style: TypographyTokens.body1.copyWith(color: ColorTokens.textPrimary),
                                          decoration: InputDecoration(
                                            hintText: 'Ïù¥Î©îÏùº',
                                            hintStyle: TypographyTokens.body1.copyWith(color: ColorTokens.textSecondary),
                                            filled: true,
                                            fillColor: ColorTokens.surface,
                                            border: OutlineInputBorder(
                                              borderRadius: BorderRadius.circular(SpacingTokens.radiusSmall),
                                              borderSide: BorderSide.none,
                                            ),
                                            contentPadding: EdgeInsets.symmetric(
                                              horizontal: SpacingTokens.sm,
                                              vertical: SpacingTokens.sm,
                                            ),
                                          ),
                                        ),
                                        SizedBox(height: SpacingTokens.sm),
                                        
                                        // Ìå®Ïä§ÏõåÎìú ÏûÖÎ†• ÌïÑÎìú
                                        TextField(
                                          controller: _passwordController,
                                          obscureText: true,
                                          style: TypographyTokens.body1.copyWith(color: ColorTokens.textPrimary),
                                          decoration: InputDecoration(
                                            hintText: 'ÎπÑÎ∞ÄÎ≤àÌò∏',
                                            hintStyle: TypographyTokens.body1.copyWith(color: ColorTokens.textSecondary),
                                            filled: true,
                                            fillColor: ColorTokens.surface,
                                            border: OutlineInputBorder(
                                              borderRadius: BorderRadius.circular(SpacingTokens.radiusSmall),
                                              borderSide: BorderSide.none,
                                            ),
                                            contentPadding: EdgeInsets.symmetric(
                                              horizontal: SpacingTokens.sm,
                                              vertical: SpacingTokens.sm,
                                            ),
                                          ),
                                        ),
                                        SizedBox(height: SpacingTokens.sm),
                                        
                                        // Î°úÍ∑∏Ïù∏/ÌöåÏõêÍ∞ÄÏûÖ Î≤ÑÌäº
                                        ElevatedButton(
                                          onPressed: _isLoading ? null : _handleEmailAuth,
                                          style: ElevatedButton.styleFrom(
                                            backgroundColor: ColorTokens.primary,
                                            foregroundColor: ColorTokens.textLight,
                                            minimumSize: Size(250, 48),
                                            shape: RoundedRectangleBorder(
                                              borderRadius: BorderRadius.circular(SpacingTokens.radiusSmall),
                                            ),
                                          ),
                                          child: Text(
                                            _isSignUp ? 'ÌöåÏõêÍ∞ÄÏûÖ' : 'Î°úÍ∑∏Ïù∏',
                                            style: TypographyTokens.button.copyWith(color: ColorTokens.textLight),
                                          ),
                                        ),
                                        SizedBox(height: SpacingTokens.xs),
                                        
                                        // Î°úÍ∑∏Ïù∏/ÌöåÏõêÍ∞ÄÏûÖ Î™®Îìú Ï†ÑÌôò
                                        TextButton(
                                          onPressed: () {
                                            setState(() {
                                              _isSignUp = !_isSignUp;
                                              _errorMessage = null;
                                            });
                                          },
                                          child: Text(
                                            _isSignUp ? 'Ïù¥ÎØ∏ Í≥ÑÏ†ïÏù¥ ÏûàÏúºÏã†Í∞ÄÏöî? Î°úÍ∑∏Ïù∏' : 'Í≥ÑÏ†ïÏù¥ ÏóÜÏúºÏã†Í∞ÄÏöî? ÌöåÏõêÍ∞ÄÏûÖ',
                                            style: TypographyTokens.body2.copyWith(
                                              color: ColorTokens.textLight,
                                              decoration: TextDecoration.underline,
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ] else ...[
                                  // üéØ Î©îÏù∏ Î°úÍ∑∏Ïù∏ ÏÑ†ÌÉù ÌôîÎ©¥ (3Í∞ú Î≤ÑÌäº)
                                  Column(
                                    children: [
                                      // Google Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
                                      _buildLoginButton(
                                        text: 'GoogleÎ°ú Î°úÍ∑∏Ïù∏',
                                        onPressed: _handleGoogleSignIn,
                                        backgroundColor: ColorTokens.surface,
                                        textColor: ColorTokens.textPrimary,
                                        leadingIcon: Padding(
                                          padding: EdgeInsets.only(right: SpacingTokens.sm),
                                          child: Image.asset(
                                            'assets/images/google.png',
                                            width: SpacingTokens.iconSizeMedium,
                                            height: SpacingTokens.iconSizeMedium,
                                            errorBuilder: (context, error, stackTrace) {
                                              return Icon(Icons.g_translate, color: ColorTokens.textPrimary);
                                            },
                                          ),
                                        ),
                                      ),
                                      SizedBox(height: SpacingTokens.sm),

                                      // Apple Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
                                      _buildLoginButton(
                                        text: 'AppleÎ°ú Î°úÍ∑∏Ïù∏',
                                        onPressed: _handleAppleSignIn,
                                        backgroundColor: ColorTokens.surface,
                                        textColor: ColorTokens.black,
                                        leadingIcon: Padding(
                                          padding: EdgeInsets.only(right: SpacingTokens.sm, bottom: SpacingTokens.xs),
                                          child: Image.asset(
                                            'assets/images/apple.png',
                                            width: SpacingTokens.iconSizeMedium,
                                            height: SpacingTokens.iconSizeMedium,
                                            errorBuilder: (context, error, stackTrace) {
                                              return Icon(Icons.apple, color: ColorTokens.black);
                                            },
                                          ),
                                        ),
                                      ),
                                      SizedBox(height: SpacingTokens.sm),

                                      // üÜï Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏ Î≤ÑÌäº (Îã§Î•∏ Î≤ÑÌäºÎì§Í≥º ÎèôÏùºÌïú Ïä§ÌÉÄÏùº)
                                      _buildLoginButton(
                                        text: 'Ïù¥Î©îÏùºÎ°ú Î°úÍ∑∏Ïù∏',
                                        onPressed: () {
                                          setState(() {
                                            _isEmailLogin = true;
                                            _errorMessage = null;
                                          });
                                        },
                                        backgroundColor: ColorTokens.surface,
                                        textColor: ColorTokens.textPrimary,
                                        leadingIcon: Padding(
                                          padding: EdgeInsets.only(right: SpacingTokens.sm),
                                          child: Icon(
                                            Icons.email_outlined,
                                            color: ColorTokens.textPrimary,
                                            size: SpacingTokens.iconSizeMedium,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                                
                                SizedBox(height: SpacingTokens.md),
                                
                                // Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ ÎëòÎü¨Î≥¥Í∏∞ Î≤ÑÌäº Ï∂îÍ∞Ä
                                TextButton(
                                  onPressed: _isLoading ? null : _handleSkipLogin,
                                  child: Text(
                                    'Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ ÎëòÎü¨Î≥¥Í∏∞',
                                    style: TypographyTokens.button.copyWith(
                                      color: ColorTokens.textLight,
                                      decoration: TextDecoration.underline,
                                    ),
                                  ),
                                ),
                                
                                SizedBox(height: SpacingTokens.sm),
                                // Î°úÍ∑∏Ïù∏ ÏïàÎÇ¥ Î©îÏãúÏßÄ Ï∂îÍ∞Ä
                                RichText(
                                  textAlign: TextAlign.center,
                                  text: TextSpan(
                                    style: TypographyTokens.body2.copyWith(
                                      color: ColorTokens.textLight,
                                    ),
                                    children: [
                                      TextSpan(text: 'Î°úÍ∑∏Ïù∏ Ïãú '),
                                      TextSpan(
                                        text: 'Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®',
                                        style: TypographyTokens.body2.copyWith(
                                          color: ColorTokens.textLight,
                                          decoration: TextDecoration.underline,
                                        ),
                                        recognizer: TapGestureRecognizer()
                                          ..onTap = () {
                                            if (kDebugMode) {
                                              print('Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ® ÎßÅÌÅ¨ ÌÅ¥Î¶≠Îê®');
                                            }
                                            launchUrl(
                                              Uri.parse('https://www.pikabook.co/privacy.html'),
                                              mode: LaunchMode.externalApplication,
                                            );
                                          },
                                      ),
                                      TextSpan(text: 'Í≥º'),
                                      TextSpan(
                                        text: ' Ïù¥Ïö©ÏïΩÍ¥Ä',
                                        style: TypographyTokens.body2.copyWith(
                                          color: ColorTokens.textLight,
                                          decoration: TextDecoration.underline,
                                        ),
                                        recognizer: TapGestureRecognizer()
                                          ..onTap = () {
                                            if (kDebugMode) {
                                              print('Ïù¥Ïö©ÏïΩÍ¥Ä ÎßÅÌÅ¨ ÌÅ¥Î¶≠Îê®');
                                            }
                                            launchUrl(
                                              Uri.parse('https://www.apple.com/legal/internet-services/itunes/dev/stdeula/'),
                                              mode: LaunchMode.externalApplication,
                                            );
                                          },
                                      ),
                                      TextSpan(text: 'Ïóê ÎèôÏùòÌï©ÎãàÎã§.'),
                                    ],
                                  ),
                                ),
                              ],
                          ),
                          SizedBox(height: SpacingTokens.xl + SpacingTokens.sm),
                        ],
                      ),
                    ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoginButton({
    required String text,
    required VoidCallback onPressed,
    required Color backgroundColor,
    required Color textColor,
    required Widget leadingIcon,
  }) {
    return Container(
      width: 250,
      child: ElevatedButton(
        onPressed: _isLoading ? null : onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor,
          foregroundColor: textColor,
          elevation: 0,
          padding: EdgeInsets.symmetric(vertical: SpacingTokens.sm + SpacingTokens.xsHalf, horizontal: SpacingTokens.sm),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(SpacingTokens.radiusSmall),
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            leadingIcon,
            Text(
              text,
              style: TypographyTokens.buttonEn.copyWith(
                color: ColorTokens.textPrimary,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Google Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
  Future<void> _handleGoogleSignIn() async {
    if (_isLoading) return;
    
    try {
      setState(() {
        _isLoading = true;
        _errorMessage = null;
      });
      
      // FirebaseÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÎäîÏßÄ ÌôïÏù∏
      if (Firebase.apps.isEmpty) {
        throw Exception('FirebaseÍ∞Ä ÏïÑÏßÅ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      }
      
      // ÏÇ¨Ïö©Ïûê Î≥ÄÏàò
      User? user;
      
      try {
        // ÏßÅÏ†ë Íµ¨ÌòÑÎêú Google Î°úÍ∑∏Ïù∏ ÏãúÎèÑ
        user = await _authService.signInWithGoogle();
        
        // ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÍ∑∏Ïù∏Ìïú Í≤ΩÏö∞
        if (user != null) {
          // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÏΩúÎ∞± Ìò∏Ï∂ú
          widget.onLoginSuccess(user);
        } else {
          // throw Exception('Î°úÍ∑∏Ïù∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.');
          setState(() {
            _errorMessage = 'Î°úÍ∑∏Ïù∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.';
            _isLoading = false;
          });
        }
      } catch (e) {
        setState(() {
          _errorMessage = 'Î°úÍ∑∏Ïù∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.';
          _isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Î°úÍ∑∏Ïù∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.';
        _isLoading = false;
      });
    }
  }
  
  // Apple Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
  Future<void> _handleAppleSignIn() async {
    if (_isLoading) return;
    
    try {
      setState(() {
        _isLoading = true;
        _errorMessage = null;
      });
      
      // FirebaseÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÎäîÏßÄ ÌôïÏù∏
      if (Firebase.apps.isEmpty) {
        throw Exception('FirebaseÍ∞Ä ÏïÑÏßÅ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      }
      
      if (kDebugMode) {
        debugPrint('üçé Apple Sign In ÏãúÏûë...');
      }
      
      // Apple Î°úÍ∑∏Ïù∏ ÏãúÎèÑ
      User? user = await _authService.signInWithApple();
      
      // üéØ ÏÇ¨Ïö©Ïûê Ï∑®ÏÜå Ïãú Ï°∞Ïö©Ìûà Ï≤òÎ¶¨ (null Î∞òÌôò)
      if (user == null) {
        if (kDebugMode) {
          debugPrint('üçé Apple Sign In: ÏÇ¨Ïö©ÏûêÍ∞Ä Ï∑®ÏÜåÌï® - Ï°∞Ïö©Ìûà Ï≤òÎ¶¨');
        }
        setState(() {
          _isLoading = false;
        });
        return;
      }
      
      // ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÍ∑∏Ïù∏Ìïú Í≤ΩÏö∞
      if (kDebugMode) {
        debugPrint('üçé Apple Sign In ÏÑ±Í≥µ: ${user.uid}');
      }
      widget.onLoginSuccess(user);
      
    } catch (e) {
      if (kDebugMode) {
        debugPrint('üçé Apple Sign In Ïã§Ìå®: $e');
      }
      
      // üéØ ÌäπÏ†ï Ïò§Î•òÏóê Îî∞Î•∏ Ï≤òÎ¶¨
      String errorMessage = 'Î°úÍ∑∏Ïù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      
      if (e.toString().contains('AuthorizationError Code=1001') ||
          e.toString().contains('ÏÇ¨Ïö©ÏûêÍ∞Ä Ï∑®ÏÜå')) {
        // ÏÇ¨Ïö©Ïûê Ï∑®ÏÜå - Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
        setState(() {
          _isLoading = false;
        });
        return;
      }
      
      if (e.toString().contains('AKAuthenticationError Code=-7003')) {
        errorMessage = 'Apple ID Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.\nÏû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.';
      } else if (e.toString().contains('NSOSStatusErrorDomain Code=-54')) {
        errorMessage = 'ÏãúÏä§ÌÖú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.\nÎîîÎ∞îÏù¥Ïä§Î•º Ïû¨Î∂ÄÌåÖÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.';
      } else if (e.toString().contains('Apple ID Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§') ||
                 e.toString().contains('ÏãúÏä§ÌÖú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§')) {
        errorMessage = e.toString().replaceAll('Exception: ', '');
      }
      
      setState(() {
        _errorMessage = errorMessage;
        _isLoading = false;
      });
    }
  }

  // Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏/ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨
  Future<void> _handleEmailAuth() async {
    if (_isLoading) return;
    
    final email = _emailController.text.trim();
    final password = _passwordController.text;
    
    // ÏûÖÎ†•Í∞í Í≤ÄÏ¶ù
    if (email.isEmpty || password.isEmpty) {
      setState(() {
        _errorMessage = 'Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
      });
      return;
    }
    
    if (!email.contains('@') || !email.contains('.')) {
      setState(() {
        _errorMessage = 'Ïò¨Î∞îÎ•∏ Ïù¥Î©îÏùº ÌòïÏãùÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
      });
      return;
    }
    
    if (password.length < 6) {
      setState(() {
        _errorMessage = 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 6Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.';
      });
      return;
    }
    
    try {
      setState(() {
        _isLoading = true;
        _errorMessage = null;
      });
      
      User? user;
      
      if (_isSignUp) {
        // ÌöåÏõêÍ∞ÄÏûÖ
        user = await _authService.signUpWithEmail(email, password);
      } else {
        // Î°úÍ∑∏Ïù∏
        user = await _authService.signInWithEmail(email, password);
      }
      
      if (user != null) {
        widget.onLoginSuccess(user);
      } else {
        setState(() {
          _errorMessage = 'Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
          _isLoading = false;
        });
      }
    } catch (e) {
      String errorMessage = 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
      
      if (e is FirebaseAuthException) {
        switch (e.code) {
          case 'user-not-found':
            errorMessage = 'Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ Ïù¥Î©îÏùºÏûÖÎãàÎã§.';
            break;
          case 'wrong-password':
            errorMessage = 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.';
            break;
          case 'email-already-in-use':
            errorMessage = 'Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ Ïù¥Î©îÏùºÏûÖÎãàÎã§.';
            break;
          case 'weak-password':
            errorMessage = 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÎÑàÎ¨¥ ÏïΩÌï©ÎãàÎã§.';
            break;
          case 'invalid-email':
            errorMessage = 'Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ Ïù¥Î©îÏùº ÌòïÏãùÏûÖÎãàÎã§.';
            break;
          case 'too-many-requests':
            errorMessage = 'ÎÑàÎ¨¥ ÎßéÏùÄ ÏãúÎèÑÍ∞Ä ÏûàÏóàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
            break;
          default:
            errorMessage = e.message ?? errorMessage;
            break;
        }
      }
      
      setState(() {
        _errorMessage = errorMessage;
        _isLoading = false;
      });
    }
  }

  // ÏïàÏ†ÑÌïú ÌôîÎ©¥ ÎÜíÏù¥ Í≥ÑÏÇ∞ (NaN Î∞©ÏßÄ)
  double _getSafeScreenHeight(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    if (screenHeight.isNaN || screenHeight.isInfinite || screenHeight <= 0) {
      return 600.0; // Í∏∞Î≥∏Í∞í
    }
    return screenHeight;
  }

  // Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ ÎëòÎü¨Î≥¥Í∏∞ Ï≤òÎ¶¨
  Future<void> _handleSkipLogin() async {
    if (_isLoading) return;
    
    try {
      setState(() {
        _isLoading = true;
      });
      
      if (kDebugMode) {
        debugPrint('[LoginScreen] Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ ÎëòÎü¨Î≥¥Í∏∞ ÏãúÏûë');
      }
      
      // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûàÎã§Î©¥ Î°úÍ∑∏ÏïÑÏõÉ
      if (FirebaseAuth.instance.currentUser != null) {
        if (kDebugMode) {
          debugPrint('[LoginScreen] Í∏∞Ï°¥ Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê Í∞êÏßÄ, Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìñâ');
        }
        await FirebaseAuth.instance.signOut();
      }
      
      // App ÏúÑÏ†ØÏóê ÏÉòÌîå Î™®Îìú Ï†ÑÌôò ÏöîÏ≤≠
      if (widget.onSkipLogin != null) {
        if (kDebugMode) {
          debugPrint('[LoginScreen] App ÏúÑÏ†ØÏóê ÏÉòÌîå Î™®Îìú Ï†ÑÌôò ÏöîÏ≤≠ ÏΩúÎ∞± Ìò∏Ï∂ú');
        }
        widget.onSkipLogin!(); // App ÏúÑÏ†ØÏùò _requestSampleModeScreen Ìò∏Ï∂ú
      } else {
        // ÏΩúÎ∞±Ïù¥ ÏóÜÎäî Í≤ΩÏö∞ (ÏòàÏÉÅÏπò Î™ªÌïú ÏÉÅÌô©)
        if (kDebugMode) {
          debugPrint('[LoginScreen] Í≤ΩÍ≥†: onSkipLogin ÏΩúÎ∞±Ïù¥ nullÏûÖÎãàÎã§.');
        }
        setState(() { _isLoading = false; }); // Î°úÎî© Ìï¥Ï†ú
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('[LoginScreen] ÏÉòÌîå Î™®Îìú ÏßÑÏûÖ Ï§ë Ïò§Î•ò: $e');
      }
      setState(() {
        _errorMessage = 'Î°úÍ∑∏Ïù∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.';
        _isLoading = false;
      });
    }
  }
}
